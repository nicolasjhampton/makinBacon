{"version":3,"sources":["server.js","api.js","objectFunct.js","globalVar.js","routes.js","gameflow.js","emitters.js","dynamics.js","random.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtFA;AACA;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"app.js","sourcesContent":["var express = require('express'), app = express(), server = require('http').createServer(app), io = require('socket.io')(server);\nvar request = require('request-promise');\nvar server_port = process.env.PORT || 5000;\napp.set('port', server_port);\napp.use(express.static(__dirname + '/public'));\nserver.listen(app.get('port'), function () {\n    console.log(\"Listening on port \" + app.get('port'));\n});\n","var ApiRequest = (function () {\n    function ApiRequest(requestType, id) {\n        this.requestType = requestType;\n        this.id = id;\n        this.apiUrl = 'https://api.themoviedb.org/3/';\n        this.apiKey = '';\n        this.options = { url: \"\", method: \"GET\" };\n        switch (requestType) {\n            case 'popular':\n                this.options.url = this.apiUrl + 'person/popular?page=' + this.id + '&api_key=' + this.apiKey;\n                break;\n            case 'actors':\n                this.options.url = this.apiUrl + 'person/' + this.id + '?api_key=' + this.apiKey + '&append_to_response=movie_credits';\n                break;\n            case 'movies':\n                this.options.url = this.apiUrl + 'movie/' + this.id + '?api_key=' + this.apiKey + '&append_to_response=credits';\n                break;\n        }\n    }\n    return ApiRequest;\n})();\nvar Poster = (function () {\n    function Poster(pageUrl) {\n        this.pageUrl = pageUrl;\n        this.baseUrl = 'http://image.tmdb.org/t/p/w92';\n        this.unknownImg = 'https://upload.wikimedia.org/wikipedia/commons/4/44/Question_mark_(black_on_white).png';\n        if (pageUrl !== null) {\n            this.url = this.baseUrl + this.pageUrl;\n        }\n        else {\n            this.url = this.unknownImg;\n        }\n    }\n    return Poster;\n})();\n","var StackCard = (function () {\n    function StackCard(jsonObject, data) {\n        var cast;\n        var nameKey;\n        var creditsType;\n        var creditsKey;\n        var posterKey;\n        if (data.type === \"actors\") {\n            cast = jsonObject.movie_credits.cast;\n            nameKey = \"name\";\n            creditsKey = \"original_title\";\n            creditsType = \"movies\";\n            posterKey = 'profile_path';\n        }\n        else if (data.type === \"movies\") {\n            cast = jsonObject.credits.cast;\n            nameKey = \"original_title\";\n            creditsKey = \"name\";\n            creditsType = \"actors\";\n            posterKey = 'poster_path';\n        }\n        var credits = cast.map(function (obj) {\n            return {\n                type: creditsType,\n                name: obj[creditsKey],\n                id: obj.id\n            };\n        });\n        this.gameID = data.gameID;\n        this.player = data.player;\n        this.type = data.type;\n        this.name = jsonObject[nameKey];\n        this.id = jsonObject.id;\n        this.poster = new Poster(jsonObject[posterKey]);\n        this.credits = credits;\n    }\n    return StackCard;\n})();\nvar Game = (function () {\n    function Game(gameID, startingPlayer) {\n        this.gameID = gameID;\n        var players = {};\n        players[startingPlayer] = 0;\n        this.playerList = players;\n        this.actorCount = 0;\n        this.isBacon = false;\n        this.cardStack = [];\n    }\n    Game.prototype.pushCard = function (jsonObject, data) {\n        var stackcard = new StackCard(jsonObject, data);\n        if (data.firstStackEmit !== true) {\n            this.playerList[data.player] += 100;\n        }\n        if (data.type === \"actors\") {\n            this.actorCount += 1;\n        }\n        this.cardStack.push(stackcard);\n        return data;\n    };\n    return Game;\n})();\nvar GameStack = (function () {\n    function GameStack() {\n        this.stack = [];\n        this.gameCount = 0;\n    }\n    GameStack.prototype.getGamelist = function () {\n        return this.stack.map(function (obj) {\n            return {\n                gameID: obj.gameID,\n                playerList: obj.playerList,\n                starting: obj.cardStack[0].name || null\n            };\n        });\n    };\n    GameStack.prototype.addGame = function (data) {\n        var game = new Game(this.gameCount, data.player);\n        this.stack[this.gameCount] = game;\n        this.gameCount++;\n        return game.gameID;\n    };\n    GameStack.prototype.getGame = function (gameID) {\n        return this.stack[gameID];\n    };\n    return GameStack;\n})();\n","var gamestack = new GameStack();\n","io.sockets.on('connect', function (socket) {\n    socket.on('adduser', function (data) {\n        newPlayerInit(socket, data);\n    });\n    socket.on('select game', function (data) {\n        if (data.gameID === 'newGame') {\n            startNewGame(data, socket);\n        }\n        else {\n            joinGameInProgress(data, socket);\n        }\n    });\n    socket.on('update', function (data) {\n        addChoiceAndUpdateGame(data);\n    });\n    socket.on('leaveroom', function (data) {\n        socket.leave(data.ID);\n    });\n});\n","var startNewGame = function (data, socket) {\n    var gameID = gamestack.addGame(data);\n    data['gameID'] = gameID;\n    data['type'] = \"actors\";\n    data['firstStackEmit'] = true;\n    socket.join(gameID);\n    var getPopularPage = new ApiRequest('popular', random(true));\n    request(getPopularPage.options)\n        .then(JSON.parse)\n        .then(getRandomActor)\n        .then(request)\n        .then(JSON.parse)\n        .then(function (response) {\n        return gamestack.getGame(data.gameID).pushCard(response, data);\n    })\n        .then(sendStack);\n};\nvar joinGameInProgress = function (data, socket) {\n    socket.join(data.gameID);\n    if (!gamestack.getGame(data.gameID).playerList[data.player]) {\n        gamestack.getGame(data.gameID).playerList[data.player] = 0;\n    }\n    sendStack(data);\n};\nvar addChoiceAndUpdateGame = function (data) {\n    var stack = gamestack.getGame(data.gameID).cardStack;\n    if (data.type !== stack[stack.length - 1].type) {\n        var apiRequest = new ApiRequest(data.type, data.id);\n        request(apiRequest.options)\n            .then(JSON.parse)\n            .then(function (response) {\n            return gamestack.getGame(data.gameID).pushCard(response, data);\n        })\n            .then(checkBacon)\n            .then(sendStack);\n    }\n};\n","var newPlayerInit = function (socket, data) {\n    socket.username = data.username;\n    socket.emit('init', { game: {}, gameList: gamestack.getGamelist(), username: socket.username });\n};\nvar sendStack = function (data) {\n    console.log(gamestack.getGame(data.gameID));\n    io.sockets.in(data.gameID).emit('update', { game: gamestack.getGame(data.gameID) });\n    io.sockets.emit('gameList', { gameList: gamestack.getGamelist() });\n    if (gamestack.getGame(data.gameID).actorCount === 7 || gamestack.getGame(data.gameID).isBacon === true) {\n        removeGame(data.gameID);\n    }\n};\nvar removeGame = function (ID) {\n    gamestack.getGame(ID).cardStack = [{ name: 'Game Over' }];\n    gamestack.getGame(ID).playerList = { deadGame: 'Game Over' };\n    gamestack.getGame(ID).isBacon = true;\n    io.sockets.in(ID).emit('leaveroom');\n    io.sockets.emit('gameList', { gameList: gamestack.getGamelist() });\n};\n","var checkBacon = function (data) {\n    var ID = data.gameID;\n    var player = data.player;\n    var currentCardStack = gamestack.getGame(ID).cardStack;\n    var baconSearch = currentCardStack[currentCardStack.length - 1].credits;\n    for (var actor = 0; actor < baconSearch.length; actor++) {\n        if (baconSearch[actor].id === 4724) {\n            gamestack.getGame(ID).actorCount += 1;\n            gamestack.getGame(ID).playerList[player] += 100;\n            gamestack.getGame(ID).cardStack.push(returnBacon(data));\n            gamestack.getGame(ID).isBacon = true;\n            break;\n        }\n    }\n    return data;\n};\nvar returnBacon = function (data) {\n    var jsonObject = {\n        name: \"Kevin Bacon\",\n        id: 4724,\n        poster: \"http://image.tmdb.org/t/p/w92/p1uCaOjxSC1xS5TgmD4uloAkbLd.jpg\",\n        credits: []\n    };\n    var kevinBacon = new StackCard(jsonObject, data);\n    return kevinBacon;\n};\n","var random = function (type) {\n    if (type) {\n        return Math.floor((Math.random() * 100) + 1);\n    }\n    else {\n        return Math.floor((Math.random() * 20));\n    }\n};\nvar getRandomActor = function (pageJSONObject) {\n    var chosenActor = pageJSONObject.results[random(false)];\n    var actorRequest = new ApiRequest('actors', chosenActor.id);\n    return actorRequest.options;\n};\n"],"sourceRoot":"/source/"}