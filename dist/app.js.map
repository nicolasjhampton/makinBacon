{"version":3,"sources":["server.js","globalVar.js","routes.js","gameflow.js","emitters.js","dynamics.js","api.js","random.js","objectFunct.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACRA;AACA;AACA;AACA;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"app.js","sourcesContent":["var express = require('express'), app = express(), server = require('http').createServer(app), io = require('socket.io')(server);\nvar request = require('request-promise');\nvar server_port = process.env.PORT || 5000;\napp.set('port', server_port);\napp.use(express.static(__dirname + '/public'));\nserver.listen(app.get('port'), function () {\n    console.log(\"Listening on port \" + app.get('port'));\n});\n","var gameStack = [];\nvar newGame = true;\nvar gameNumber = 0;\n","io.sockets.on('connect', function (socket) {\n    socket.on('adduser', function (data) {\n        newPlayerInit(socket, data);\n    });\n    socket.on('select game', function (data) {\n        console.log('selection received');\n        if (data.gameID === 'newGame') {\n            startNewGame(data, socket);\n        }\n        else {\n            joinGameInProgress(data, socket);\n        }\n    });\n    socket.on('update', function (data) {\n        console.log('new addition to the stack received ' + data.gameID);\n        addChoiceAndUpdateGame(data);\n    });\n    socket.on('leaveroom', function (data) {\n        socket.leave(data.ID);\n    });\n});\n","var startNewGame = function (data, socket) {\n    data['gameID'] = createGame(data.player);\n    data['type'] = \"actors\";\n    data['firstStackEmit'] = true;\n    socket.join(data.gameID);\n    var getPopularPage = getApiOptions('popular', random(true));\n    request(getPopularPage)\n        .then(JSON.parse)\n        .then(getRandomActor)\n        .then(request)\n        .then(JSON.parse)\n        .then(function (response) {\n        return createFirstStackObject(response, data);\n    })\n        .then(sendStack);\n};\nvar joinGameInProgress = function (data, socket) {\n    socket.join(data.gameID);\n    if (!gameStack[data.gameID].playerList[data.player]) {\n        gameStack[data.gameID].playerList[data.player] = 0;\n    }\n    sendStack(data);\n};\nvar addChoiceAndUpdateGame = function (data) {\n    var stack = gameStack[data.gameID].stack;\n    if (data.type !== stack[stack.length - 1].type) {\n        var options = getApiOptions(data.type, data.id);\n        request(options)\n            .then(JSON.parse)\n            .then(function (response) {\n            return createStackObject(response, data);\n        })\n            .then(checkBacon)\n            .then(sendStack);\n    }\n};\n","var newPlayerInit = function (socket, data) {\n    socket.username = data.username;\n    socket.emit('init', { game: {}, gameList: createGameList(), username: socket.username });\n};\nvar sendStack = function (data) {\n    io.sockets.in(data.gameID).emit('update', { game: gameStack[data.gameID] });\n    io.sockets.emit('gameList', { gameList: createGameList() });\n    if (gameStack[data.gameID].actorCount === 7 || gameStack[data.gameID].isBacon === true) {\n        removeGame(data.gameID);\n    }\n};\nvar removeGame = function (ID) {\n    gameStack[ID].stack = [{ name: 'Game Over' }];\n    gameStack[ID].players = { deadGame: 'Game Over' };\n    gameStack[ID].isBacon = true;\n    io.sockets.in(ID).emit('leaveroom');\n    io.sockets.emit('gameList', { gameList: createGameList() });\n};\n","var createFirstStackObject = function (jsonObject, data) {\n    addActorToStack(jsonObject, data);\n    return data;\n};\nvar createStackObject = function (jsonObject, data) {\n    if (data.type === \"actors\") {\n        addActorToStack(jsonObject, data);\n    }\n    else if (data.type === \"movies\") {\n        addMovieToStack(jsonObject, data);\n    }\n    return data;\n};\nvar addActorToStack = function (jsonObject, data) {\n    var newActorObject = createActorObject(jsonObject, data);\n    if (data.firstStackEmit !== true) {\n        gameStack[data.gameID].playerList[data.player] += 100;\n    }\n    gameStack[data.gameID].actorCount += 1;\n    gameStack[data.gameID].stack.push(newActorObject);\n};\nvar addMovieToStack = function (jsonObject, data) {\n    var newMovieObject = createMovieObject(jsonObject, data);\n    gameStack[data.gameID].playerList[data.player] += 100;\n    gameStack[data.gameID].stack.push(newMovieObject);\n};\nvar checkBacon = function (data) {\n    var ID = data.gameID;\n    var player = data.player;\n    var baconSearch = gameStack[ID].stack[gameStack[ID].stack.length - 1].credits;\n    for (var actor = 0; actor < baconSearch.length; actor++) {\n        if (baconSearch[actor].id === 4724) {\n            gameStack[ID].actorCount += 1;\n            gameStack[ID].playerList[player] += 100;\n            gameStack[ID].stack.push(returnBacon(data));\n            gameStack[ID].isBacon = true;\n            break;\n        }\n    }\n    return data;\n};\nvar returnBacon = function (data) {\n    var kevinBacon = {\n        gameID: data.gameID,\n        player: data.player,\n        type: \"actors\",\n        name: \"Kevin Bacon\",\n        id: 4724,\n        poster: \"http://image.tmdb.org/t/p/w92/p1uCaOjxSC1xS5TgmD4uloAkbLd.jpg\",\n        credits: []\n    };\n    return kevinBacon;\n};\n","var getApiOptions = function (optionsRequest, idOrPage) {\n    var apiKey = '';\n    var apiUrl = 'https://api.themoviedb.org/3/';\n    switch (optionsRequest) {\n        case 'popular':\n            return {\n                url: apiUrl + 'person/popular?page=' + idOrPage + '&api_key=' + apiKey,\n                method: \"GET\"\n            };\n            break;\n        case 'actors':\n            return {\n                url: apiUrl + 'person/' + idOrPage + '?api_key=' + apiKey + '&append_to_response=movie_credits',\n                method: \"GET\"\n            };\n            break;\n        case 'movies':\n            return {\n                url: apiUrl + 'movie/' + idOrPage + '?api_key=' + apiKey + '&append_to_response=credits',\n                method: \"GET\"\n            };\n            break;\n    }\n};\nvar getPosterUrl = function (pageUrl) {\n    var posterUrl = 'http://image.tmdb.org/t/p/w92';\n    var unknownImg = 'https://upload.wikimedia.org/wikipedia/commons/4/44/Question_mark_(black_on_white).png';\n    if (pageUrl !== null) {\n        return posterUrl + pageUrl;\n    }\n    else {\n        return unknownImg;\n    }\n};\n","var random = function (type) {\n    if (type) {\n        return Math.floor((Math.random() * 100) + 1);\n    }\n    else {\n        return Math.floor((Math.random() * 20));\n    }\n};\nvar getRandomActor = function (pageJSONObject) {\n    var chosenActor = pageJSONObject.results[random(false)];\n    return getApiOptions('actors', chosenActor.id);\n};\n","var createGameList = function () {\n    var gameList = gameStack.map(function (obj) {\n        var game = {\n            gameID: obj.gameID,\n            playerList: obj.playerList,\n            starting: obj.stack[0].name || null\n        };\n        return game;\n    });\n    return gameList;\n};\nvar createGame = function (startingPlayer) {\n    var newGameID = gameNumber;\n    gameNumber++;\n    var players = {};\n    players[startingPlayer] = 0;\n    var game = {\n        gameID: newGameID,\n        playerList: players,\n        actorCount: 0,\n        isBacon: false,\n        stack: []\n    };\n    gameStack[newGameID] = game;\n    return newGameID;\n};\nvar createMovieObject = function (jsonObject, data) {\n    var movieTitle = jsonObject.original_title;\n    var movieID = jsonObject.id;\n    var moviePoster = getPosterUrl(jsonObject.poster_path);\n    var movieCast = jsonObject.credits.cast.map(function (obj) {\n        var actor = {\n            type: \"actors\",\n            name: obj.name,\n            id: obj.id\n        };\n        return actor;\n    });\n    var newMovieObject = {\n        gameID: data.gameID,\n        player: data.player,\n        type: \"movies\",\n        name: movieTitle,\n        id: movieID,\n        poster: moviePoster,\n        credits: movieCast\n    };\n    return newMovieObject;\n};\nvar createActorObject = function (jsonObject, data) {\n    var actorName = jsonObject.name;\n    var actorID = jsonObject.id;\n    var actorPoster = getPosterUrl(jsonObject.profile_path);\n    var actorMovies = jsonObject.movie_credits.cast.map(function (obj) {\n        var movie = {\n            type: \"movies\",\n            name: obj.original_title,\n            id: obj.id\n        };\n        return movie;\n    });\n    var newActorObject = {\n        gameID: data.gameID,\n        player: data.firstStackEmit ? \"start\" : data.player,\n        type: \"actors\",\n        name: actorName,\n        id: actorID,\n        poster: actorPoster,\n        credits: actorMovies\n    };\n    return newActorObject;\n};\n"],"sourceRoot":"/source/"}